/* automatically generated by rust-bindgen 0.59.0 */

#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(deref_nullptr)]

pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type wchar_t = __darwin_wchar_t;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type max_align_t = u128;
extern "C" {
    pub fn aws_crt_init();
}
extern "C" {
    pub fn aws_crt_clean_up();
}
extern "C" {
    pub fn aws_crt_test_error(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_allocator {
    _unused: [u8; 0],
}
pub type aws_crt_allocator = aws_allocator;
extern "C" {
    pub fn aws_crt_default_allocator() -> *mut aws_crt_allocator;
}
extern "C" {
    pub fn aws_crt_mem_acquire(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aws_crt_mem_calloc(
        element_count: size_t,
        element_size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aws_crt_mem_release(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn aws_crt_mem_bytes() -> u64;
}
extern "C" {
    pub fn aws_crt_mem_count() -> u64;
}
extern "C" {
    pub fn aws_crt_mem_dump();
}
extern "C" {
    pub fn aws_crt_last_error() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aws_crt_error_str(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn aws_crt_error_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn aws_crt_error_debug_str(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn aws_crt_reset_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_event_loop_group {
    _unused: [u8; 0],
}
pub type aws_crt_event_loop_group = aws_event_loop_group;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_event_loop_group_options {
    _unused: [u8; 0],
}
pub type aws_crt_event_loop_group_options = _aws_crt_event_loop_group_options;
extern "C" {
    pub fn aws_crt_event_loop_group_options_new() -> *mut aws_crt_event_loop_group_options;
}
extern "C" {
    pub fn aws_crt_event_loop_group_options_release(options: *mut aws_crt_event_loop_group_options);
}
extern "C" {
    pub fn aws_crt_event_loop_group_options_set_max_threads(
        options: *mut aws_crt_event_loop_group_options,
        max_threads: u16,
    );
}
extern "C" {
    pub fn aws_crt_event_loop_group_new(
        options: *const aws_crt_event_loop_group_options,
    ) -> *mut aws_crt_event_loop_group;
}
extern "C" {
    pub fn aws_crt_event_loop_group_acquire(
        elg: *mut aws_crt_event_loop_group,
    ) -> *mut aws_crt_event_loop_group;
}
extern "C" {
    pub fn aws_crt_event_loop_group_release(elg: *mut aws_crt_event_loop_group);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_input_stream {
    _unused: [u8; 0],
}
pub type aws_crt_input_stream = aws_input_stream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_input_stream_options {
    _unused: [u8; 0],
}
pub type aws_crt_input_stream_options = _aws_crt_input_stream_options;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_input_stream_status {
    pub is_end_of_stream: bool,
    pub is_valid: bool,
}
#[test]
fn bindgen_test_layout__aws_crt_input_stream_status() {
    assert_eq!(
        ::std::mem::size_of::<_aws_crt_input_stream_status>(),
        2usize,
        concat!("Size of: ", stringify!(_aws_crt_input_stream_status))
    );
    assert_eq!(
        ::std::mem::align_of::<_aws_crt_input_stream_status>(),
        1usize,
        concat!("Alignment of ", stringify!(_aws_crt_input_stream_status))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_aws_crt_input_stream_status>())).is_end_of_stream as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_aws_crt_input_stream_status),
            "::",
            stringify!(is_end_of_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_aws_crt_input_stream_status>())).is_valid as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_aws_crt_input_stream_status),
            "::",
            stringify!(is_valid)
        )
    );
}
pub type aws_crt_input_stream_status = _aws_crt_input_stream_status;
pub const aws_crt_input_stream_seek_basis_AWS_CRT_STREAM_SEEK_BASIS_BEGIN:
    aws_crt_input_stream_seek_basis = 0;
pub const aws_crt_input_stream_seek_basis_AWS_CRT_STREAM_SEEK_BASIS_END:
    aws_crt_input_stream_seek_basis = 2;
pub type aws_crt_input_stream_seek_basis = ::std::os::raw::c_uint;
pub type aws_crt_input_stream_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        offset: i64,
        seek_basis: aws_crt_input_stream_seek_basis,
    ) -> ::std::os::raw::c_int,
>;
pub type aws_crt_input_stream_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        dest: *mut u8,
        dest_length: size_t,
    ) -> ::std::os::raw::c_int,
>;
pub type aws_crt_input_stream_get_status_fn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        out_status: *mut aws_crt_input_stream_status,
    ) -> ::std::os::raw::c_int,
>;
pub type aws_crt_input_stream_get_length_fn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        out_length: *mut i64,
    ) -> ::std::os::raw::c_int,
>;
pub type aws_crt_input_stream_destroy_fn =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn aws_crt_input_stream_options_new() -> *mut aws_crt_input_stream_options;
}
extern "C" {
    pub fn aws_crt_input_stream_options_release(options: *mut aws_crt_input_stream_options);
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_user_data(
        options: *mut aws_crt_input_stream_options,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_seek(
        options: *mut aws_crt_input_stream_options,
        seek_fn: aws_crt_input_stream_seek_fn,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_read(
        options: *mut aws_crt_input_stream_options,
        read_fn: aws_crt_input_stream_read_fn,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_get_status(
        options: *mut aws_crt_input_stream_options,
        get_status_fn: aws_crt_input_stream_get_status_fn,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_get_length(
        options: *mut aws_crt_input_stream_options,
        get_length_fn: aws_crt_input_stream_get_length_fn,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_options_set_destroy(
        options: *mut aws_crt_input_stream_options,
        destroy_fn: aws_crt_input_stream_destroy_fn,
    );
}
extern "C" {
    pub fn aws_crt_input_stream_new(
        options: *const aws_crt_input_stream_options,
    ) -> *mut aws_crt_input_stream;
}
extern "C" {
    pub fn aws_crt_input_stream_release(input_stream: *mut aws_crt_input_stream);
}
extern "C" {
    pub fn aws_crt_input_stream_seek(
        input_stream: *mut aws_crt_input_stream,
        offset: i64,
        seek_basis: aws_crt_input_stream_seek_basis,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aws_crt_input_stream_read(
        stream: *mut aws_crt_input_stream,
        dest: *mut u8,
        dest_length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aws_crt_input_stream_get_status(
        stream: *mut aws_crt_input_stream,
        status: *mut aws_crt_input_stream_status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aws_crt_input_stream_get_length(
        stream: *mut aws_crt_input_stream,
        length: *mut i64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_crt_buf {
    pub blob: *mut u8,
    pub length: size_t,
}
#[test]
fn bindgen_test_layout_aws_crt_buf() {
    assert_eq!(
        ::std::mem::size_of::<aws_crt_buf>(),
        16usize,
        concat!("Size of: ", stringify!(aws_crt_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<aws_crt_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(aws_crt_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aws_crt_buf>())).blob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aws_crt_buf),
            "::",
            stringify!(blob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aws_crt_buf>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aws_crt_buf),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_http_headers {
    _unused: [u8; 0],
}
pub type aws_crt_http_headers = _aws_crt_http_headers;
extern "C" {
    pub fn aws_crt_http_headers_new_from_blob(
        blob: *const u8,
        blob_length: size_t,
    ) -> *mut aws_crt_http_headers;
}
extern "C" {
    pub fn aws_crt_http_headers_acquire(
        headers: *mut aws_crt_http_headers,
    ) -> *mut aws_crt_http_headers;
}
extern "C" {
    pub fn aws_crt_http_headers_release(headers: *mut aws_crt_http_headers);
}
extern "C" {
    pub fn aws_crt_http_headers_to_blob(
        headers: *const aws_crt_http_headers,
        out_blob: *mut aws_crt_buf,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_http_message {
    _unused: [u8; 0],
}
pub type aws_crt_http_message = _aws_crt_http_message;
extern "C" {
    pub fn aws_crt_http_message_new_from_blob(
        blob: *const u8,
        blob_length: size_t,
    ) -> *mut aws_crt_http_message;
}
extern "C" {
    pub fn aws_crt_http_message_set_body_stream(
        message: *mut aws_crt_http_message,
        body_stream: *mut aws_crt_input_stream,
    );
}
extern "C" {
    pub fn aws_crt_http_message_release(message: *mut aws_crt_http_message);
}
extern "C" {
    pub fn aws_crt_http_message_to_blob(
        message: *const aws_crt_http_message,
        out_blob: *mut aws_crt_buf,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials {
    _unused: [u8; 0],
}
pub type aws_crt_credentials = aws_credentials;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_credentials_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_options = _aws_crt_credentials_options;
extern "C" {
    pub fn aws_crt_credentials_options_new() -> *mut aws_crt_credentials_options;
}
extern "C" {
    pub fn aws_crt_credentials_options_release(options: *mut aws_crt_credentials_options);
}
extern "C" {
    pub fn aws_crt_credentials_options_set_access_key_id(
        options: *mut aws_crt_credentials_options,
        access_key_id: *const u8,
        access_key_id_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_options_set_secret_access_key(
        options: *mut aws_crt_credentials_options,
        secret_access_key: *const u8,
        secret_access_key_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_options_set_session_token(
        options: *mut aws_crt_credentials_options,
        session_token: *const u8,
        session_token_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_options_set_expiration_timepoint_seconds(
        options: *mut aws_crt_credentials_options,
        expiration_timepoint_seconds: u64,
    );
}
extern "C" {
    pub fn aws_crt_credentials_new(
        options: *const aws_crt_credentials_options,
    ) -> *mut aws_crt_credentials;
}
extern "C" {
    pub fn aws_crt_credentials_acquire(
        credentials: *mut aws_crt_credentials,
    ) -> *mut aws_crt_credentials;
}
extern "C" {
    pub fn aws_crt_credentials_release(credentials: *mut aws_crt_credentials);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials_provider {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider = aws_credentials_provider;
extern "C" {
    pub fn aws_crt_credentials_provider_acquire(
        credentials_provider: *mut aws_crt_credentials_provider,
    ) -> *mut aws_crt_credentials_provider;
}
extern "C" {
    pub fn aws_crt_credentials_provider_release(
        credentials_provider: *mut aws_crt_credentials_provider,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_credentials_provider_static_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_static_options = _aws_crt_credentials_provider_static_options;
extern "C" {
    pub fn aws_crt_credentials_provider_static_options_new(
    ) -> *mut aws_crt_credentials_provider_static_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_static_options_release(
        options: *mut aws_crt_credentials_provider_static_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_static_options_set_access_key_id(
        options: *mut aws_crt_credentials_provider_static_options,
        access_key_id: *const u8,
        access_key_id_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_static_options_set_secret_access_key(
        options: *mut aws_crt_credentials_provider_static_options,
        secret_access_key: *const u8,
        secret_access_key_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_static_options_set_session_token(
        options: *mut aws_crt_credentials_provider_static_options,
        session_token: *const u8,
        session_token_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_static_new(
        options: *const aws_crt_credentials_provider_static_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials_provider_environment_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_environment_options =
    aws_credentials_provider_environment_options;
extern "C" {
    pub fn aws_crt_credentials_provider_environment_options_new(
    ) -> *mut aws_crt_credentials_provider_environment_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_environment_options_release(
        options: *mut aws_crt_credentials_provider_environment_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_environment_new(
        options: *const aws_crt_credentials_provider_environment_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_credentials_provider_profile_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_profile_options = _aws_credentials_provider_profile_options;
extern "C" {
    pub fn aws_crt_credentials_provider_profile_options_new(
    ) -> *mut aws_crt_credentials_provider_profile_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_profile_options_release(
        options: *mut aws_crt_credentials_provider_profile_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_profile_options_set_profile_name_override(
        options: *mut aws_crt_credentials_provider_profile_options,
        profile_name: *const u8,
        profile_name_len: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_profile_options_set_config_file_name_override(
        options: *mut aws_crt_credentials_provider_profile_options,
        config_file_name: *const u8,
        config_file_name_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_profile_options_set_credentials_file_name_override(
        options: *mut aws_crt_credentials_provider_profile_options,
        credentials_file_name: *const u8,
        credentials_file_name_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_profile_new(
        options: *const aws_crt_credentials_provider_profile_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials_provider_cached_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_cached_options = aws_credentials_provider_cached_options;
extern "C" {
    pub fn aws_crt_credentials_provider_cached_options_new(
    ) -> *mut aws_crt_credentials_provider_cached_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_cached_options_release(
        options: *mut aws_crt_credentials_provider_cached_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_cached_options_set_refresh_time_in_milliseconds(
        options: *mut aws_crt_credentials_provider_cached_options,
        refresh_time_in_milliseconds: u64,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_cached_new(
        options: *const aws_crt_credentials_provider_cached_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials_provider_imds_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_imds_options = aws_credentials_provider_imds_options;
pub const aws_crt_imds_protocol_version_AWS_CRT_IMDS_PROTOCOL_V2: aws_crt_imds_protocol_version = 0;
pub const aws_crt_imds_protocol_version_AWS_CRT_IMDS_PROTOCOL_V1: aws_crt_imds_protocol_version = 1;
pub type aws_crt_imds_protocol_version = ::std::os::raw::c_uint;
extern "C" {
    pub fn aws_crt_credentials_provider_imds_options_new(
    ) -> *mut aws_crt_credentials_provider_imds_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_imds_options_release(
        options: *mut aws_crt_credentials_provider_imds_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_imds_options_set_imds_version(
        options: *mut aws_crt_credentials_provider_imds_options,
        imds_version: aws_crt_imds_protocol_version,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_imds_new(
        options: *const aws_crt_credentials_provider_imds_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_credentials_provider_ecs_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_ecs_options = _aws_crt_credentials_provider_ecs_options;
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_options_new(
    ) -> *mut aws_crt_credentials_provider_ecs_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_options_release(
        options: *mut aws_crt_credentials_provider_ecs_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_options_set_host(
        options: *mut aws_crt_credentials_provider_ecs_options,
        host: *const u8,
        host_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_options_set_path_and_query(
        options: *mut aws_crt_credentials_provider_ecs_options,
        path_and_query: *const u8,
        path_and_query_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_options_set_auth_token(
        options: *mut aws_crt_credentials_provider_ecs_options,
        auth_token: *const u8,
        auth_token_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_ecs_new(
        options: *const aws_crt_credentials_provider_ecs_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_credentials_provider_x509_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_x509_options = _aws_crt_credentials_provider_x509_options;
extern "C" {
    pub fn aws_crt_credentials_provider_x509_options_new(
    ) -> *mut aws_crt_credentials_provider_x509_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_x509_options_release(
        options: *mut aws_crt_credentials_provider_x509_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_x509_options_set_thing_name(
        options: *mut aws_crt_credentials_provider_x509_options,
        thing_name: *const u8,
        thing_name_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_x509_options_set_role_alias(
        options: *mut aws_crt_credentials_provider_x509_options,
        role_alias: *const u8,
        role_alias_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_x509_options_set_endpoint(
        options: *mut aws_crt_credentials_provider_x509_options,
        endpoint: *const u8,
        endpoint_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_x509_new(
        options: *mut aws_crt_credentials_provider_x509_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_credentials_provider_sts_web_identity_options {
    _unused: [u8; 0],
}
pub type aws_crt_credentials_provider_sts_web_identity_options =
    aws_credentials_provider_sts_web_identity_options;
extern "C" {
    pub fn aws_crt_credentials_provider_sts_web_identity_options_new(
    ) -> *mut aws_crt_credentials_provider_sts_web_identity_options;
}
extern "C" {
    pub fn aws_crt_credentials_provider_sts_web_identity_options_release(
        options: *mut aws_crt_credentials_provider_sts_web_identity_options,
    );
}
extern "C" {
    pub fn aws_crt_credentials_provider_sts_web_identity_new(
        options: *const aws_crt_credentials_provider_sts_web_identity_options,
    ) -> *mut aws_crt_credentials_provider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aws_crt_signing_config_aws {
    _unused: [u8; 0],
}
pub type aws_crt_signing_config_aws = _aws_crt_signing_config_aws;
pub const aws_crt_signing_algorithm_AWS_CRT_SIGNING_ALGORITHM_V4: aws_crt_signing_algorithm = 0;
pub const aws_crt_signing_algorithm_AWS_CRT_SIGNING_ALGORITHM_V4_ASYMMETRIC:
    aws_crt_signing_algorithm = 1;
pub type aws_crt_signing_algorithm = ::std::os::raw::c_uint;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_HTTP_REQUEST_HEADERS:
    aws_crt_signature_type = 0;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_HTTP_REQUEST_QUERY_PARAMS:
    aws_crt_signature_type = 1;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_HTTP_REQUEST_CHUNK: aws_crt_signature_type =
    2;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_HTTP_REQUEST_EVENT: aws_crt_signature_type =
    3;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_CANONICAL_REQUEST_HEADERS:
    aws_crt_signature_type = 4;
pub const aws_crt_signature_type_AWS_CRT_SIGNATURE_TYPE_CANONICAL_REQUEST_QUERY_PARAMS:
    aws_crt_signature_type = 5;
pub type aws_crt_signature_type = ::std::os::raw::c_uint;
pub const aws_crt_signed_body_header_type_AWS_CRT_SIGNED_BODY_HEADER_TYPE_NONE:
    aws_crt_signed_body_header_type = 0;
pub const aws_crt_signed_body_header_type_AWS_CRT_SIGNED_BODY_HEADER_TYPE_X_AMZ_CONTENT_SHA256:
    aws_crt_signed_body_header_type = 1;
pub type aws_crt_signed_body_header_type = ::std::os::raw::c_uint;
pub type aws_crt_should_sign_header_fn = ::std::option::Option<
    unsafe extern "C" fn(
        header_name: *const ::std::os::raw::c_char,
        length: size_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn aws_crt_signing_config_aws_new() -> *mut aws_crt_signing_config_aws;
}
extern "C" {
    pub fn aws_crt_signing_config_aws_release(signing_config: *mut aws_crt_signing_config_aws);
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_algorithm(
        signing_config: *mut aws_crt_signing_config_aws,
        algorithm: aws_crt_signing_algorithm,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_signature_type(
        signing_config: *mut aws_crt_signing_config_aws,
        sig_type: aws_crt_signature_type,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_credentials_provider(
        signing_config: *mut aws_crt_signing_config_aws,
        credentials_provider: *mut aws_crt_credentials_provider,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_region(
        signing_config: *mut aws_crt_signing_config_aws,
        region: *const u8,
        region_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_service(
        signing_config: *mut aws_crt_signing_config_aws,
        service: *const u8,
        service_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_use_double_uri_encode(
        signing_config: *mut aws_crt_signing_config_aws,
        use_double_uri_encode: bool,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_should_normalize_uri_path(
        signing_config: *mut aws_crt_signing_config_aws,
        should_normalize_uri_path: bool,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_omit_session_token(
        signing_config: *mut aws_crt_signing_config_aws,
        omit_session_token: bool,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_signed_body_value(
        signing_config: *mut aws_crt_signing_config_aws,
        signed_body: *const u8,
        signed_body_length: size_t,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_signed_body_header_type(
        signing_config: *mut aws_crt_signing_config_aws,
        signed_body_header_type: aws_crt_signed_body_header_type,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_expiration_in_seconds(
        signing_config: *mut aws_crt_signing_config_aws,
        expiration_in_seconds: u64,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_date(
        signing_config: *mut aws_crt_signing_config_aws,
        seconds_since_epoch: u64,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_set_should_sign_header_fn(
        signing_config: *mut aws_crt_signing_config_aws,
        should_sign_header_fn: aws_crt_should_sign_header_fn,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn aws_crt_signing_config_aws_validate(
        signing_config: *mut aws_crt_signing_config_aws,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_signable {
    _unused: [u8; 0],
}
pub type aws_crt_signable = aws_signable;
extern "C" {
    pub fn aws_crt_signable_new_from_http_request(
        http_request: *const aws_crt_http_message,
    ) -> *mut aws_crt_signable;
}
extern "C" {
    pub fn aws_crt_signable_new_from_chunk(
        chunk_stream: *mut aws_crt_input_stream,
        previous_signature: *const u8,
        previous_signature_length: size_t,
    ) -> *mut aws_crt_signable;
}
extern "C" {
    pub fn aws_crt_signable_new_from_canonical_request(
        request: *const u8,
        request_length: size_t,
    ) -> *mut aws_crt_signable;
}
extern "C" {
    pub fn aws_crt_signable_release(signable: *mut aws_crt_signable);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_signing_result {
    _unused: [u8; 0],
}
pub type aws_crt_signing_result = aws_signing_result;
extern "C" {
    pub fn aws_crt_signing_result_release(result: *mut aws_crt_signing_result);
}
extern "C" {
    pub fn aws_crt_signing_result_apply_to_http_request(
        result: *const aws_crt_signing_result,
        request: *mut aws_crt_http_message,
    ) -> ::std::os::raw::c_int;
}
pub type aws_crt_signing_complete_fn = ::std::option::Option<
    unsafe extern "C" fn(
        result: *mut aws_crt_signing_result,
        error_code: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn aws_crt_sign_request_aws(
        signable: *mut aws_crt_signable,
        signing_config: *const aws_crt_signing_config_aws,
        on_complete: aws_crt_signing_complete_fn,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aws_crt_crc32(input: *const u8, length: size_t, previous: u32) -> u32;
}
extern "C" {
    pub fn aws_crt_crc32c(input: *const u8, length: size_t, previous: u32) -> u32;
}
